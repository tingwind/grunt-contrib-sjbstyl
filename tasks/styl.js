// Generated by CoffeeScript 1.5.0
(function() {

  exports.complies = function(grunt, compe) {
    var exports;
    exports = {};
    exports.init = function(options) {
      var basePath, currentDir, distCss, distStyl, dplPath, fargs, fs, getPath, importPath, nib, opt, pagePath, path, processDir, stylus, sysPath, tasks, writeFile, _ref;
      fs = require('fs');
      path = require('path');
      opt = require('optimist');
      stylus = require('stylus');
      nib = require('nib');
      getPath = function(dir) {
        if (options.onlyStylu) {
          return dir;
        } else {
          return 'tos-styl/' + dir;
        }
      };
      distCss = getPath('dist_css');
      distStyl = getPath('dist_styl');
      importPath = getPath('styl/import');
      basePath = getPath('styl/base');
      dplPath = getPath('styl/dpl');
      sysPath = getPath('styl/sys');
      pagePath = getPath('styl/app/page');
      writeFile = function(putfile, results) {
        return grunt.file.write(putfile, results.join(grunt.util.normalizelf(grunt.util.linefeed)));
      };
      processDir = function(dir, callback) {
        return grunt.file.recurse(dir, function(abspath, rootdir, subdir, filename) {
          return callback(filename, abspath);
        });
      };
      tasks = {
        importDirProcess: function(mod, needimp, currentDir) {
          var content, fargs, filesArr, linesArr, putCss, putfile;
          if (needimp == null) {
            needimp = false;
          }
          putfile = distStyl + '/' + mod + '.styl';
          putCss = distCss + '/' + mod + '.css';
          content = [];
          linesArr = [];
          filesArr = [];
          fargs = [];
          if (needimp === true) {
            fargs.push(function() {
              return content.push(grunt.file.read(distStyl + '/import.styl'));
            });
          }
          fargs.push(function() {
            return processDir(currentDir, function(filename, abspath) {
              linesArr[filename] = {
                path: '@import ' + '"' + abspath + '"'
              };
              return filesArr.push(filename);
            });
          });
          fargs.push(function() {
            var file, _i, _len, _results;
            filesArr.sort();
            _results = [];
            for (_i = 0, _len = filesArr.length; _i < _len; _i++) {
              file = filesArr[_i];
              _results.push(content.push(linesArr[file].path));
            }
            return _results;
          });
          fargs.push(function() {
            return writeFile(putfile, content);
          });
          fargs.push(function() {
            return compe(putfile, options, function(css, err) {
              return grunt.file.write(putCss, css);
            });
          });
          return grunt.util.async.parallel(fargs);
        },
        proPage: function(filepath) {
          var content, fargs, name, nameArr, pathArr, putCss, putfile;
          pathArr = filepath.split('/');
          putfile = distStyl + '/' + pathArr[pathArr.length - 1];
          nameArr = pathArr[pathArr.length - 1].split('.');
          nameArr.pop();
          name = nameArr.join('.');
          putCss = distCss + '/' + name + '.css';
          content = [];
          fargs = [];
          fargs.push(function() {
            return tasks.importDirProcess('import', false, importPath);
          });
          fargs.push(function() {
            return content.push(grunt.file.read(distStyl + '/import.styl'));
          });
          fargs.push(function() {
            return content.push(grunt.file.read(filepath));
          });
          fargs.push(function() {
            return writeFile(putfile, content);
          });
          fargs.push(function() {
            return compe(putfile, options, function(css, err) {
              return grunt.file.write(putCss, css);
            });
          });
          return grunt.util.async.parallel(fargs);
        }
      };
      if ((_ref = options.mod) === 'base' || _ref === 'dpl' || _ref === 'sys') {
        currentDir = path.dirname(options.filepath);
        fargs = [];
        fargs.push(function() {
          return tasks.importDirProcess('import', false, importPath);
        });
        fargs.push(function() {
          return tasks.importDirProcess(options.mod, true, currentDir);
        });
        return grunt.util.async.parallel(fargs);
      } else if (options.mod === 'import') {
        currentDir = path.dirname(options.filepath);
        fargs = [];
        fargs.push(function() {
          return tasks.importDirProcess(options.mod, false, currentDir);
        });
        fargs.push(function() {
          return tasks.importDirProcess('base', true, basePath);
        });
        fargs.push(function() {
          return tasks.importDirProcess('dpl', true, dplPath);
        });
        fargs.push(function() {
          return tasks.importDirProcess('sys', true, sysPath);
        });
        fargs.push(function() {
          return grunt.file.recurse(pagePath, function(abspath, rootdir, subdir, filename) {
            return tasks.proPage(abspath);
          });
        });
        return grunt.util.async.parallel(fargs);
      } else if (options.mod === 'page') {
        return tasks.proPage(options.filepath);
      } else if (options.mod === 'module') {
        return grunt.file.recurse(pagePath, function(abspath, rootdir, subdir, filename) {
          return tasks.proPage(abspath);
        });
      }
    };
    return exports;
  };

}).call(this);
